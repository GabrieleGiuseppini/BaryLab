
- Particle state machine:
	+ Particles::StateType struct
		+ Stored in buffer as opt<.>
	+ State is:
		+ Current triangle
		+ Current barycentric coords
		+ Target position (copy of trajectory)
	+ Initialized at SetTrajectory (i.e. the final call), and at Move Particle and Move Vertex
		+ LabController::Simulation::InitializeParticleState(p)
			+ Only populated if there is a trajectory, and if particle is in a triangle
				+ Publish
			+ Else: nullopt
				+ Publish
	+ LabController::Update:
		+ For each particle that has a state:
			+ bool isCompleted = LabController::UpdateParticleState(.)
			+ if isComplete:
				+ Reset particle state
				+ Reset trajectory
				+ Publish
	+ Split state, ConstrainedState is opt
		+ Redo state initialization & publishing
			+ Publishing done @ end of update, at a single place
	= LabController::UpdateParticleState:
		+ If not in a triangle:
			+ Move to target
		+ If @ target:
			+ return true
		+ assert(InTriangle)
		--- TODOHERE: next is broken: only valid if direction is outside of the edge
		- If on floor edge (based on current bary coords):
			+ AND: normal is opposite direction of trajectory
			+ AND: allow when inside floor to move like ghost: if not all edges are floor
			+ Test before & after
			+ return true
			- Fix new bary coord normalization and then restate ghost condition
			- Test ghost condition
		+ Calc bary coords of target wrt current triangle
		+ If stricly inside:
			+ Move to target
			+ return true
		= Find hit edge & coords on it
			- Trick: calculate edge t at entry of if's
			- Try: approach with calculating all t's and choosing min among those 0 <= t <= 1
			- TODO: verify sign of value of intersection t
		+ Move to edge (pos + cur bary coords)
		+ If edge is floor:
			+ // Impact			
			+ return false
		- Find next triangle
			- Edges::GetOppositeTriangle(s, t)
		- If no triangle found:
			- // Become free
			- Reset current triangle
			- return false
		- Move to edge of that next triangle (cur triangle + cur bary coords)
		- return false


- Facilities to display:
	- Highlighted edge + "place" (for trajectory hitting edge)

- Take care of colinear triangle @ barycentric coords